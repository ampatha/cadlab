// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using CalculatorClient;
using Microsoft.Rest;

namespace CalculatorClient
{
    public static partial class MathExtensions
    {
        /// <summary>
        /// Adds value 1 to value 2
        /// </summary>
        /// <param name='operations'>
        /// Reference to the CalculatorClient.IMath.
        /// </param>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        public static double Add(this IMath operations, double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMath)s).AddAsync(value1, value2, ocpApimSubscriptionKey, subscriptionKey);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Adds value 1 to value 2
        /// </summary>
        /// <param name='operations'>
        /// Reference to the CalculatorClient.IMath.
        /// </param>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<double> AddAsync(this IMath operations, double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<double> result = await operations.AddWithOperationResponseAsync(value1, value2, ocpApimSubscriptionKey, subscriptionKey, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Divides value 1 by value 2
        /// </summary>
        /// <param name='operations'>
        /// Reference to the CalculatorClient.IMath.
        /// </param>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        public static double Divide(this IMath operations, double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMath)s).DivideAsync(value1, value2, ocpApimSubscriptionKey, subscriptionKey);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Divides value 1 by value 2
        /// </summary>
        /// <param name='operations'>
        /// Reference to the CalculatorClient.IMath.
        /// </param>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<double> DivideAsync(this IMath operations, double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<double> result = await operations.DivideWithOperationResponseAsync(value1, value2, ocpApimSubscriptionKey, subscriptionKey, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Multiplies value 1 and value 2
        /// </summary>
        /// <param name='operations'>
        /// Reference to the CalculatorClient.IMath.
        /// </param>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        public static double Multiply(this IMath operations, double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMath)s).MultiplyAsync(value1, value2, ocpApimSubscriptionKey, subscriptionKey);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Multiplies value 1 and value 2
        /// </summary>
        /// <param name='operations'>
        /// Reference to the CalculatorClient.IMath.
        /// </param>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<double> MultiplyAsync(this IMath operations, double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<double> result = await operations.MultiplyWithOperationResponseAsync(value1, value2, ocpApimSubscriptionKey, subscriptionKey, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Raises value 1 to the power of value 2
        /// </summary>
        /// <param name='operations'>
        /// Reference to the CalculatorClient.IMath.
        /// </param>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        public static double Power(this IMath operations, double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMath)s).PowerAsync(value1, value2, ocpApimSubscriptionKey, subscriptionKey);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Raises value 1 to the power of value 2
        /// </summary>
        /// <param name='operations'>
        /// Reference to the CalculatorClient.IMath.
        /// </param>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<double> PowerAsync(this IMath operations, double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<double> result = await operations.PowerWithOperationResponseAsync(value1, value2, ocpApimSubscriptionKey, subscriptionKey, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <summary>
        /// Subtracts value 2 from value 1
        /// </summary>
        /// <param name='operations'>
        /// Reference to the CalculatorClient.IMath.
        /// </param>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        public static double Subtract(this IMath operations, double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IMath)s).SubtractAsync(value1, value2, ocpApimSubscriptionKey, subscriptionKey);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Subtracts value 2 from value 1
        /// </summary>
        /// <param name='operations'>
        /// Reference to the CalculatorClient.IMath.
        /// </param>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<double> SubtractAsync(this IMath operations, double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<double> result = await operations.SubtractWithOperationResponseAsync(value1, value2, ocpApimSubscriptionKey, subscriptionKey, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
