// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using CalculatorClient;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace CalculatorClient
{
    internal partial class Math : IServiceOperations<CalculatorClientClient>, IMath
    {
        /// <summary>
        /// Initializes a new instance of the Math class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal Math(CalculatorClientClient client)
        {
            this._client = client;
        }

        private CalculatorClientClient _client;

        /// <summary>
        /// Gets a reference to the CalculatorClient.CalculatorClientClient.
        /// </summary>
        public CalculatorClientClient Client
        {
            get { return this._client; }
        }

        /// <summary>
        /// Adds value 1 to value 2
        /// </summary>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<double>> AddWithOperationResponseAsync(double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (ocpApimSubscriptionKey == null)
            {
                throw new ArgumentNullException("ocpApimSubscriptionKey");
            }

            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("value1", value1);
                tracingParameters.Add("value2", value2);
                tracingParameters.Add("subscriptionKey", subscriptionKey);
                tracingParameters.Add("ocpApimSubscriptionKey", ocpApimSubscriptionKey);
                ServiceClientTracing.Enter(invocationId, this, "AddAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/api/Math/Add";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("value1=" + Uri.EscapeDataString(value1.ToString()));
            queryParameters.Add("value2=" + Uri.EscapeDataString(value2.ToString()));
            if (subscriptionKey != null)
            {
                queryParameters.Add("subscription-key=" + Uri.EscapeDataString(subscriptionKey));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);

            // Set Headers
            httpRequest.Headers.Add("Ocp-Apim-Subscription-Key", ocpApimSubscriptionKey);

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK)
            {
                HttpOperationException ex = new HttpOperationException();
                ex.Request = new HttpRequestMessageWrapper(httpRequest, httpRequest.Content.AsString());
                ex.Response = new HttpResponseMessageWrapper(httpResponse, httpResponse.Content.AsString()); ;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }

            // Create Result
            HttpOperationResponse<double> result = new HttpOperationResponse<double>();
            result.Request = httpRequest;
            result.Response = httpResponse;

            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                double resultModel = default(double);
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel = ((double)responseDoc);
                }
                result.Body = resultModel;
            }

            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Divides value 1 by value 2
        /// </summary>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<double>> DivideWithOperationResponseAsync(double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (ocpApimSubscriptionKey == null)
            {
                throw new ArgumentNullException("ocpApimSubscriptionKey");
            }

            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("value1", value1);
                tracingParameters.Add("value2", value2);
                tracingParameters.Add("subscriptionKey", subscriptionKey);
                tracingParameters.Add("ocpApimSubscriptionKey", ocpApimSubscriptionKey);
                ServiceClientTracing.Enter(invocationId, this, "DivideAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/api/Math/Divide";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("value1=" + Uri.EscapeDataString(value1.ToString()));
            queryParameters.Add("value2=" + Uri.EscapeDataString(value2.ToString()));
            if (subscriptionKey != null)
            {
                queryParameters.Add("subscription-key=" + Uri.EscapeDataString(subscriptionKey));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);

            // Set Headers
            httpRequest.Headers.Add("Ocp-Apim-Subscription-Key", ocpApimSubscriptionKey);

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK)
            {
                HttpOperationException ex = new HttpOperationException();
                ex.Request = new HttpRequestMessageWrapper(httpRequest, httpRequest.Content.AsString());
                ex.Response = new HttpResponseMessageWrapper(httpResponse, httpResponse.Content.AsString()); ;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }

            // Create Result
            HttpOperationResponse<double> result = new HttpOperationResponse<double>();
            result.Request = httpRequest;
            result.Response = httpResponse;

            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                double resultModel = default(double);
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel = ((double)responseDoc);
                }
                result.Body = resultModel;
            }

            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Multiplies value 1 and value 2
        /// </summary>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<double>> MultiplyWithOperationResponseAsync(double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (ocpApimSubscriptionKey == null)
            {
                throw new ArgumentNullException("ocpApimSubscriptionKey");
            }

            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("value1", value1);
                tracingParameters.Add("value2", value2);
                tracingParameters.Add("subscriptionKey", subscriptionKey);
                tracingParameters.Add("ocpApimSubscriptionKey", ocpApimSubscriptionKey);
                ServiceClientTracing.Enter(invocationId, this, "MultiplyAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/api/Math/Multiply";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("value1=" + Uri.EscapeDataString(value1.ToString()));
            queryParameters.Add("value2=" + Uri.EscapeDataString(value2.ToString()));
            if (subscriptionKey != null)
            {
                queryParameters.Add("subscription-key=" + Uri.EscapeDataString(subscriptionKey));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);

            // Set Headers
            httpRequest.Headers.Add("Ocp-Apim-Subscription-Key", ocpApimSubscriptionKey);

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK)
            {
                HttpOperationException ex = new HttpOperationException();
                ex.Request = new HttpRequestMessageWrapper(httpRequest, httpRequest.Content.AsString());
                ex.Response = new HttpResponseMessageWrapper(httpResponse, httpResponse.Content.AsString()); ;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }

            // Create Result
            HttpOperationResponse<double> result = new HttpOperationResponse<double>();
            result.Request = httpRequest;
            result.Response = httpResponse;

            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                double resultModel = default(double);
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel = ((double)responseDoc);
                }
                result.Body = resultModel;
            }

            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Raises value 1 to the power of value 2
        /// </summary>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<double>> PowerWithOperationResponseAsync(double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (ocpApimSubscriptionKey == null)
            {
                throw new ArgumentNullException("ocpApimSubscriptionKey");
            }

            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("value1", value1);
                tracingParameters.Add("value2", value2);
                tracingParameters.Add("subscriptionKey", subscriptionKey);
                tracingParameters.Add("ocpApimSubscriptionKey", ocpApimSubscriptionKey);
                ServiceClientTracing.Enter(invocationId, this, "PowerAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/api/Math/Power";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("value1=" + Uri.EscapeDataString(value1.ToString()));
            queryParameters.Add("value2=" + Uri.EscapeDataString(value2.ToString()));
            if (subscriptionKey != null)
            {
                queryParameters.Add("subscription-key=" + Uri.EscapeDataString(subscriptionKey));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);

            // Set Headers
            httpRequest.Headers.Add("Ocp-Apim-Subscription-Key", ocpApimSubscriptionKey);

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK)
            {
                HttpOperationException ex = new HttpOperationException();
                ex.Request = new HttpRequestMessageWrapper(httpRequest, httpRequest.Content.AsString());
                ex.Response = new HttpResponseMessageWrapper(httpResponse, httpResponse.Content.AsString()); ;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }

            // Create Result
            HttpOperationResponse<double> result = new HttpOperationResponse<double>();
            result.Request = httpRequest;
            result.Response = httpResponse;

            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                double resultModel = default(double);
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel = ((double)responseDoc);
                }
                result.Body = resultModel;
            }

            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }

        /// <summary>
        /// Subtracts value 2 from value 1
        /// </summary>
        /// <param name='value1'>
        /// Required. Format - double.
        /// </param>
        /// <param name='value2'>
        /// Required. Format - double.
        /// </param>
        /// <param name='ocpApimSubscriptionKey'>
        /// Required. subscription key in header
        /// </param>
        /// <param name='subscriptionKey'>
        /// Optional. subscription key in url
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public async Task<HttpOperationResponse<double>> SubtractWithOperationResponseAsync(double value1, double value2, string ocpApimSubscriptionKey, string subscriptionKey = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // Validate
            if (ocpApimSubscriptionKey == null)
            {
                throw new ArgumentNullException("ocpApimSubscriptionKey");
            }

            // Tracing
            bool shouldTrace = ServiceClientTracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("value1", value1);
                tracingParameters.Add("value2", value2);
                tracingParameters.Add("subscriptionKey", subscriptionKey);
                tracingParameters.Add("ocpApimSubscriptionKey", ocpApimSubscriptionKey);
                ServiceClientTracing.Enter(invocationId, this, "SubtractAsync", tracingParameters);
            }

            // Construct URL
            string url = "";
            url = url + "/api/Math/Subtract";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("value1=" + Uri.EscapeDataString(value1.ToString()));
            queryParameters.Add("value2=" + Uri.EscapeDataString(value2.ToString()));
            if (subscriptionKey != null)
            {
                queryParameters.Add("subscription-key=" + Uri.EscapeDataString(subscriptionKey));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");

            // Create HTTP transport objects
            HttpRequestMessage httpRequest = new HttpRequestMessage();
            httpRequest.Method = HttpMethod.Get;
            httpRequest.RequestUri = new Uri(url);

            // Set Headers
            httpRequest.Headers.Add("Ocp-Apim-Subscription-Key", ocpApimSubscriptionKey);

            // Set Credentials
            if (this.Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            }

            // Send Request
            if (shouldTrace)
            {
                ServiceClientTracing.SendRequest(invocationId, httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            HttpResponseMessage httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
            if (shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(invocationId, httpResponse);
            }
            HttpStatusCode statusCode = httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
            if (statusCode != HttpStatusCode.OK)
            {
                HttpOperationException ex = new HttpOperationException();
                ex.Request = new HttpRequestMessageWrapper(httpRequest, httpRequest.Content.AsString());
                ex.Response = new HttpResponseMessageWrapper(httpResponse, httpResponse.Content.AsString()); ;
                ex.Body = null;
                if (shouldTrace)
                {
                    ServiceClientTracing.Error(invocationId, ex);
                }
                throw ex;
            }

            // Create Result
            HttpOperationResponse<double> result = new HttpOperationResponse<double>();
            result.Request = httpRequest;
            result.Response = httpResponse;

            // Deserialize Response
            if (statusCode == HttpStatusCode.OK)
            {
                double resultModel = default(double);
                JToken responseDoc = null;
                if (string.IsNullOrEmpty(responseContent) == false)
                {
                    responseDoc = JToken.Parse(responseContent);
                }
                if (responseDoc != null)
                {
                    resultModel = ((double)responseDoc);
                }
                result.Body = resultModel;
            }

            if (shouldTrace)
            {
                ServiceClientTracing.Exit(invocationId, result);
            }
            return result;
        }
    }
}
